//
//  JokeStorageService.swift
//  Navigation_IOS_38...
//
//  Created by Nikita Sosyuk on 30.12.2023.
//

import Foundation
import RealmSwift

protocol JokeStorageService {
    // –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    func fetchCategories() -> [String]
    func fetchModelsSortedByTime() -> [JokeModel]
    // –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —à—É—Ç–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    func fetchModels(category: String) -> [JokeModel]
    func save(from response: JokeResponse) -> Bool
}

final class JokeStorageServiceImpl: JokeStorageService {
    
    private let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-dd-MM HH:mm:ss.SSSSSS"
        return formatter
    }()
    
    init() {
        let configuration = Realm.Configuration(schemaVersion: 2)
        Realm.Configuration.defaultConfiguration = configuration
    }
    
    func save(from response: JokeResponse) -> Bool {
        guard let realm = try? Realm() else { return false }
        
        let model = JokeModel()
        model.id = response.id
        model.value = response.value
        model.createdAt = dateFormatter.date(from: response.createdAt) ?? Date()
        model.categories.append(objectsIn: Set(response.categories))
        
        do {
            try realm.write {
                realm.create(JokeModel.self, value: model, update: .all)
            }
            return true
        } catch {
            return false
        }
    }
    
    func fetchModelsSortedByTime() -> [JokeModel] {
        guard let realm = try? Realm() else { return [] }
        
        return realm.objects(JokeModel.self).sorted(by: \.createdAt, ascending: false).map { $0 }
    }
    
    func fetchCategories() -> [String] {
        guard let realm = try? Realm() else { return [] }
        
        let objects = realm.objects(JokeModel.self)
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è) –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        var categorySet: Set<String> = []
        objects.forEach { object in
            // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É –æ–±—ä–µ–∫—Ç–∞ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ—á–∫—É —Å –ø—É—Å—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π.
            guard !object.categories.isEmpty else {
                categorySet.insert(.emptyCategory)
                return
            }
            
            // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–µ—Ç, —á—Ç–æ–±—ã –≤ –∏—Ç–æ–≥–µ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
            object.categories.forEach {
                categorySet.insert($0)
            }
        }
        
        return Array(categorySet)
    }
    
    func fetchModels(category: String) -> [JokeModel] {
        guard let realm = try? Realm() else { return [] }
        
        let objects = realm.objects(JokeModel.self)
        
        // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞ (without category üßê), —Ç–æ –∏—â–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å –ø—É—Å—Ç—ã –º–∞—Å—Å–∏–≤–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
        if category == .emptyCategory {
            return objects.filter { $0.categories.isEmpty }
        } else {
            // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –µ—Å—Ç—å, —Ç–æ –∏—â–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –≤ –º–∞—Å—Å–∏–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
            return objects.filter { $0.categories.contains(category) }
        }
    }
}

private extension String {
    static let emptyCategory = "without category üßê"
}
